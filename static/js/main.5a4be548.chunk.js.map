{"version":3,"sources":["components/SearchBox.js","components/loading.js","App.js","serviceWorker.js","index.js"],"names":["SearchBoxWrapper","styled","div","SearchInput","input","ClearButton","button","SearchBox","text","debouncedSearch","updateText","clearResults","id","value","autoComplete","maxLength","placeholder","onChange","event","target","onClick","disabled","rotation","keyframes","Spinner","GlobalStyle","createGlobalStyle","App","token","process","useState","results","repos","loading","state","setState","clear","setClear","getUser","name","a","fetch","headers","Authorization","response","json","data","getUserRepos","search","prevState","githubUser","userRepos","setTimeout","console","log","useCallback","debounce","Wrapper","Header","login","style","margin","width","fontSize","Profile","UserImg","src","avatar_url","alt","fontWeight","href","html_url","rel","public_repos","Results","length","sort","b","updated_at","map","repo","dateComponent","moment","utc","format","Repo","RepoTitle","display","justifyContent","language","img","h1","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.5a4be548.chunk.js","sourcesContent":["import React from \"react\";\nimport styled from \"styled-components\";\n\nconst SearchBoxWrapper = styled.div`\n  display: flex;\n  width: 95%;\n  margin: 5% auto;\n  justify-content: center;\n`;\n\nconst SearchInput = styled.input`\n  max-width: 500px;\n  width: 100%;\n  border-radius: 3px;\n  font-size: 1.5rem;\n  box-sizing: border-box;\n  height: 3rem;\n  border: 1px solid #ccc;\n  display: block;\n  padding: 2px 15px;\n  border-top-right-radius: 0;\n  border-bottom-right-radius: 0;\n`;\n\nconst ClearButton = styled.button`\n  width: 100px;\n  border: 1px solid #ccc;\n  border-top-right-radius: 3px;\n  border-bottom-right-radius: 3px;\n  border-left: 0;\n  background: white;\n  font-weight: bold;\n`;\n\nexport default function SearchBox({\n  text,\n  debouncedSearch,\n  updateText,\n  clearResults,\n}) {\n  return (\n    <SearchBoxWrapper>\n      <SearchInput\n        id=\"text\"\n        value={text}\n        autoComplete=\"off\"\n        maxLength=\"50\"\n        placeholder=\"Look-up a github user!\"\n        onChange={(event) => {\n          updateText(event.target.value);\n          debouncedSearch(event.target.value);\n        }}\n      />\n      <ClearButton\n        onClick={() => {\n          clearResults();\n          updateText(\"\");\n        }}\n        disabled={!text}\n      >\n        Clear\n      </ClearButton>\n    </SearchBoxWrapper>\n  );\n}\n","import styled, { keyframes } from \"styled-components\";\n\nconst rotation = keyframes`\n from {\n     transform: rotate(0deg);\n }\n to {\n     transform: rotate(360deg);\n }\n`;\n\nconst Spinner = styled.div`\n  height: 80px;\n  width: 80px;\n  border: 1px solid #000;\n  border-radius: 50%;\n  border-top: none;\n  border-right: none;\n  margin: 16px auto;\n  animation: ${rotation} 1s linear infinite;\n`;\n\nexport default Spinner;\n","import React, { useState, useCallback } from \"react\";\nimport debounce from \"lodash/debounce\";\nimport styled, { createGlobalStyle } from \"styled-components\";\nimport moment from \"moment\";\nimport SearchBox from \"./components/SearchBox\";\nimport Loading from \"./components/loading\";\n\nconst GlobalStyle = createGlobalStyle`\n  body {\n    \n    min-height: 100vh;\n    margin: 0;\nbackground-color: #fffcfc;\nbackground-image: url(\"https://www.transparenttextures.com/patterns/absurdity.png\");\n/* This is mostly intended for prototyping; please download the pattern and re-host for production environments. Thank you! */\n\n  }\n`;\n\nfunction App() {\n  const token = process.env.REACT_APP_GITHUB_API_TOKEN;\n  const [state, setState] = useState({\n    text: \"\",\n    results: [],\n    repos: [],\n    loading: false,\n  });\n\n  const { text, results, loading, repos } = state;\n\n  const [clear, setClear] = useState(false);\n\n  async function getUser(name) {\n    let response = await fetch(`https://api.github.com/users/${name}`, {\n      headers: {\n        Authorization: `token ${token}`,\n      },\n    });\n    let data = await response.json();\n    return data;\n  }\n\n  async function getUserRepos(name) {\n    let response = await fetch(`https://api.github.com/users/${name}/repos`, {\n      headers: {\n        Authorization: `token ${token}`,\n      },\n    });\n    let data = await response.json();\n    return data;\n  }\n\n  const updateText = (text) => {\n    setState((prevState) => ({ ...prevState, text }));\n  };\n\n  const clearResults = () => {\n    setState((prevState) => ({\n      ...prevState,\n      results: [],\n      repos: [],\n    }));\n    setClear(true);\n  };\n\n  const search = async (text) => {\n    setState((prevState) => ({\n      ...prevState,\n      loading: true,\n    }));\n\n    const githubUser = await getUser(text);\n    setState((prevState) => ({\n      ...prevState,\n      results: githubUser,\n    }));\n\n    const userRepos = await getUserRepos(text);\n    setState((prevState) => ({\n      ...prevState,\n      repos: userRepos,\n    }));\n\n    setTimeout(function () {\n      setState((prevState) => ({\n        ...prevState,\n        loading: false,\n      }));\n    }, 1500);\n  };\n  console.log(clear);\n\n  const debouncedSearch = useCallback(\n    debounce((text) => search(text), 500),\n    []\n  );\n\n  return (\n    <Wrapper>\n      <Header>GitHub User Lookup!</Header>\n      <SearchBox\n        text={text}\n        updateText={updateText}\n        debouncedSearch={debouncedSearch}\n        clearResults={clearResults}\n      />\n      <GlobalStyle />\n\n      {loading && <Loading />}\n      {!loading && !results.login && (\n        <div\n          style={{ margin: \"0 auto\", width: \"fit-content\", fontSize: \"24px\" }}\n        >\n          No Results\n        </div>\n      )}\n\n      {!loading && results.login && (\n        <Profile>\n          <UserImg src={results.avatar_url} alt={results.login} />\n          <div>\n            <h1 style={{ fontSize: \"18px\", fontWeight: \"bold\" }}>\n              <a\n                href={results.html_url}\n                rel=\"noopener noreferrer\"\n                target=\"_blank\"\n              >\n                {results.login}\n              </a>\n            </h1>\n            Public Repos {results.public_repos}\n          </div>\n        </Profile>\n      )}\n      <Results>\n        {!loading &&\n          repos.length > 0 &&\n          repos\n            .sort((a, b) => (a.updated_at < b.updated_at ? 1 : -1))\n            .map((repo) => {\n              var date = moment(repo.updated_at);\n              var dateComponent = date.utc().format(\"YYYY-MM-DD\");\n\n              return (\n                <Repo>\n                  <RepoTitle href={repo.html_url}>{repo.name}</RepoTitle>\n                  <div\n                    style={{\n                      display: \"flex\",\n                      justifyContent: \"space-between\",\n                      margin: \"10px 0 0\",\n                    }}\n                  >\n                    <div>{repo.language}</div>\n                    <date>{dateComponent}</date>\n                  </div>\n                </Repo>\n              );\n            })}\n      </Results>\n    </Wrapper>\n  );\n}\n\nexport default App;\n\nconst UserImg = styled.img`\n  border-radius: 50%;\n  max-width: 150px;\n  width: 100%;\n`;\n\nconst Header = styled.h1`\n  margin: 20px auto;\n  width: fit-content;\n  background-color: #fff;\n  padding: 10px 15px;\n  border: 3px solid #000;\n`;\n\nconst Profile = styled.div`\n  display: flex;\n  justify-content: space-evenly;\n  margin: 20px auto;\n  width: 60%;\n`;\n\nconst Wrapper = styled.div`\n  max-width: 800px;\n  width: 100%;\n  margin: 0 auto;\n`;\n\nconst Results = styled.div`\n  display: flex;\n  justify-content: space-around;\n  flex-wrap: wrap;\n  width: 100%;\n`;\n\nconst Repo = styled.div`\n  display: inline-block;\n  max-width: 300px;\n  width: 100%;\n  height: 50px;\n  border: 1px solid #000;\n  padding: 5px 15px;\n  margin: 10px 0;\n  background: #fff;\n`;\n\nconst RepoTitle = styled.a`\n  text-decoration: none;\n  color: #000;\n  font-weight: bold;\n`;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}